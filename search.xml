<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git常用命令</title>
    <url>/2019/10/14/git%E5%AD%A6%E4%B9%A0%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git学习常用命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mkdir：</td>
<td>XX (创建一个空目录 XX指目录名)</td>
</tr>
<tr>
<td>pwd：</td>
<td>显示当前目录的路径。</td>
</tr>
<tr>
<td>git init</td>
<td>把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</td>
</tr>
<tr>
<td>git add XX</td>
<td>把xx文件添加到暂存区去。</td>
</tr>
<tr>
<td>git commit –m “xx”</td>
<td>提交文件 –m 后面的是注释。</td>
</tr>
<tr>
<td>git status</td>
<td>查看仓库状态</td>
</tr>
<tr>
<td>git diff  XX</td>
<td>查看XX文件修改了那些内容</td>
</tr>
<tr>
<td>git log</td>
<td>查看历史记录 9ba77981e50d3df1d71e760dd43c049d79a44b6d</td>
</tr>
<tr>
<td>git reset  –hard HEAD^ 或者 git reset  –hard HEAD~</td>
<td>回退到上一个版 本(如果想回退到100个版本，使用git reset –hard HEAD~100 )</td>
</tr>
<tr>
<td>git  reflog</td>
<td>查看历史记录的版本号id</td>
</tr>
<tr>
<td>git  reset –hard</td>
<td>版本号  (回到某个版本)</td>
</tr>
<tr>
<td>cat XX</td>
<td>查看XX文件内容</td>
</tr>
<tr>
<td>git checkout — XX</td>
<td>把XX文件在工作区的修改全部撤销。</td>
</tr>
<tr>
<td>git rm XX</td>
<td>删除XX文件</td>
</tr>
<tr>
<td>git remote add origin <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="noopener">https://github.com/tugenhua0707/testgit</a></td>
<td>关联一个远程库</td>
</tr>
<tr>
<td>git remote remove origin</td>
<td>删除remote</td>
</tr>
<tr>
<td>git push –u(第一次要用-u 以后不需要) origin master</td>
<td>把当前master分支推送到远程库</td>
</tr>
<tr>
<td>git clone <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="noopener">https://github.com/tugenhua0707/testgit</a></td>
<td>从远程库中克隆</td>
</tr>
<tr>
<td>git checkout –b dev</td>
<td>创建dev分支 并切换到dev分支上  //拉取远程分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看当前所有的分支</td>
</tr>
<tr>
<td>git checkout master</td>
<td>切换回master分支</td>
</tr>
<tr>
<td>git merge dev</td>
<td>在当前的分支上合并dev分支</td>
</tr>
<tr>
<td>git branch –d dev</td>
<td>删除(本地的)dev分支</td>
</tr>
<tr>
<td>git push origin :dev</td>
<td>(同步删除线上的分支)</td>
</tr>
<tr>
<td>git branch name</td>
<td>创建分支(本地创建分支)</td>
</tr>
<tr>
<td>git push origin probranch(本地):probranch</td>
<td>(上传到线的分支)</td>
</tr>
<tr>
<td>git stash</td>
<td>把当前的工作隐藏起来 等以后恢复现场后继续工作</td>
</tr>
<tr>
<td>git stash list</td>
<td>查看所有被隐藏的文件列表</td>
</tr>
<tr>
<td>git stash apply</td>
<td>恢复被隐藏的文件，但是内容不删除</td>
</tr>
<tr>
<td>git stash drop</td>
<td>删除文件</td>
</tr>
<tr>
<td>git stash pop</td>
<td>恢复文件的同时 也删除文件</td>
</tr>
<tr>
<td>git remote</td>
<td>查看远程库的信息</td>
</tr>
<tr>
<td>git remote –v</td>
<td>查看远程库的详细信息</td>
</tr>
<tr>
<td>git push origin master</td>
<td>Git会把master分支推送到远程库对应的远程分支上</td>
</tr>
<tr>
<td>git checkout -b 本地分支名 origin/远程分支名</td>
<td>将远程git仓库里的指定分支拉取到本地（本地不存在的分支）</td>
</tr>
<tr>
<td>git push –set-upstream origin 分支名</td>
<td>git push –set-upstream origin 分支名</td>
</tr>
<tr>
<td>git config –global credential.helper store</td>
<td>免密码命令 输入命令后再次输入账号密码 以后都可以不用输入密码了</td>
</tr>
<tr>
<td>git fetch –prune</td>
<td>远端有新增分支，git fetch可以同步到新的分支到本地，但是远端有删除分支，直接”git fetch”是不能将远程已经不存在的branch等在本地删除的</td>
</tr>
<tr>
<td>git reset –hard origin/master</td>
<td>你想让本地直接和远程保持同步，想让不再提示这个讨厌信息，那么如果你本地的commit确保不想要</td>
</tr>
<tr>
<td>git branch -u origin/master</td>
<td>或者还有一个将本地代码与服务器代码更新一致的语句</td>
</tr>
<tr>
<td>git push -f origin master</td>
<td>如果想直接回退版本让远程和本地代码保持一致，那就确保本地代码没问题之后强制推到远程</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 常用配置</title>
    <url>/2019/10/14/vscode%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>插件名称</th>
<th>功能简述</th>
</tr>
</thead>
<tbody><tr>
<td>Auto Close Tag</td>
<td>自动闭合HTML标签</td>
</tr>
<tr>
<td>Auto Import</td>
<td>Typescript自动import提示</td>
</tr>
<tr>
<td>Auto Rename Tag</td>
<td>修改HTML标签时，自动修改匹配的标签</td>
</tr>
<tr>
<td>Beautify css/sass/scss/less</td>
<td>css/sass/less格式化</td>
</tr>
<tr>
<td>Better Comments</td>
<td>编写更加人性化的注释</td>
</tr>
<tr>
<td>Bookmarks</td>
<td>添加行书签</td>
</tr>
<tr>
<td>Color Picker</td>
<td>拾色器</td>
</tr>
<tr>
<td>Color Highlight</td>
<td>颜色值在代码中高亮显示</td>
</tr>
<tr>
<td>HTML CSS Support</td>
<td>css提示（支持vue）</td>
</tr>
<tr>
<td>PostCss Sorting</td>
<td>css排序</td>
</tr>
<tr>
<td>Sass</td>
<td>sass插件</td>
</tr>
<tr>
<td>gitignore</td>
<td>.gitignore文件语法</td>
</tr>
<tr>
<td>vetur</td>
<td>目前比较好的Vue语法高亮</td>
</tr>
<tr>
<td>vscode-styled-jsx</td>
<td>vscode-styled-jsx styled-jsx高亮支持</td>
</tr>
<tr>
<td>Chinese (Simplified) Language</td>
<td>中文插件</td>
</tr>
<tr>
<td>IntelliSense for CSS class names in HTML</td>
<td>html中css提示</td>
</tr>
<tr>
<td>Markdown Preview Enhanced</td>
<td>vscode markdown支持</td>
</tr>
<tr>
<td>One Dark Pro</td>
<td>vscode主题颜色</td>
</tr>
<tr>
<td>open in browser</td>
<td>html文件支持浏览器打开</td>
</tr>
<tr>
<td>vscode-icons</td>
<td>vscode 文件文件夹小图标</td>
</tr>
<tr>
<td>JavaScript (ES6) code snippets</td>
<td>es6代码提示功能</td>
</tr>
</tbody></table><a id="more"></a>
<h3 id="附个人配置文件"><a href="#附个人配置文件" class="headerlink" title="附个人配置文件"></a>附个人配置文件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // VScode主题配置</span><br><span class="line">    "editor.tabSize": 2,</span><br><span class="line">    "editor.lineHeight": 18,</span><br><span class="line">    "editor.renderLineHighlight": "none",</span><br><span class="line">    "editor.renderWhitespace": "all",</span><br><span class="line">    "editor.fontFamily": "Courier New",</span><br><span class="line">    "editor.fontSize": 14,</span><br><span class="line">    "editor.cursorBlinking": "smooth",</span><br><span class="line">    "editor.multiCursorModifier": "ctrlCmd",</span><br><span class="line">    "editor.formatOnPaste": true,</span><br><span class="line">    // 是否允许自定义的snippet片段提示,比如自定义的vue片段开启后就可以智能提示</span><br><span class="line">    "editor.snippetSuggestions": "top",</span><br><span class="line">    "workbench.iconTheme": "vscode-icons",</span><br><span class="line">    "workbench.startupEditor": "none",</span><br><span class="line"></span><br><span class="line">    "files.trimTrailingWhitespace": true,</span><br><span class="line">    // 在react的jsx中添加对emmet的支持</span><br><span class="line">    "emmet.includeLanguages": &#123;</span><br><span class="line">        "jsx-sublime-babel-tags": "javascriptreact"</span><br><span class="line">    &#125;,</span><br><span class="line">    "[cpp]": &#123;</span><br><span class="line">        "editor.quickSuggestions": true</span><br><span class="line">    &#125;,</span><br><span class="line">    "[c]": &#123;</span><br><span class="line">        "editor.quickSuggestions": true</span><br><span class="line">    &#125;,</span><br><span class="line">    "liveServer.settings.port": 5555,</span><br><span class="line">    "window.zoomLevel": 1,</span><br><span class="line">    "javascript.validate.enable": false,</span><br><span class="line">    "vetur.validation.template": false,</span><br><span class="line">    "tslint.autoFixOnSave": false,</span><br><span class="line">    "C_Cpp.errorSquiggles": "Disabled",</span><br><span class="line">    "javascript.implicitProjectConfig.experimentalDecorators": true,</span><br><span class="line">    "workbench.colorTheme": "One Dark Pro",</span><br><span class="line">    "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",</span><br><span class="line">    "liveServer.settings.donotShowInfoMsg": true,</span><br><span class="line">    "[html]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "vscode.html-language-features"</span><br><span class="line">    &#125;,</span><br><span class="line">    "explorer.confirmDelete": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>shell中curl 的用法</title>
    <url>/2019/10/14/shell%E4%B8%ADcurl%20%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><a id="more"></a>
<p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p>
<h3 id="1-不带有任何参数时，curl-就是发出-GET-请求。"><a href="#1-不带有任何参数时，curl-就是发出-GET-请求。" class="headerlink" title="1.不带有任何参数时，curl 就是发出 GET 请求。"></a>1.不带有任何参数时，curl 就是发出 GET 请求。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://www.example.com</span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2019/9/19/16d495a71b078a30?w=1414&h=216&f=png&s=70212" alt></p>
<h3 id="2-b参数用来向服务器发送-Cookie。"><a href="#2-b参数用来向服务器发送-Cookie。" class="headerlink" title="2.-b参数用来向服务器发送 Cookie。"></a>2.-b参数用来向服务器发送 Cookie。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -b <span class="string">'foo=bar'</span> https://google.com</span></span><br></pre></td></tr></table></figure>

<p>上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -b <span class="string">'foo1=bar'</span> -b <span class="string">'foo2=baz'</span> https://google.com</span></span><br></pre></td></tr></table></figure>

<p>上面命令发送两个 Cookie。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -b cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>

<p> 上面命令读取本地文件cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。</p>
<h3 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h3><p>  参数将服务器设置的 Cookie 写入一个文件。<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -c cookies.txt https://www.google.com</span></span><br></pre></td></tr></table></figure></p>
<p> 上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。</p>
<h3 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h3><p>  参数用于发送 POST 请求的数据体。<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">'login=emma＆password=123'</span>-X POST https://google.com/login</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">'login=emma'</span> -d <span class="string">'password=123'</span> -X POST  https://google.com/login</span></span><br></pre></td></tr></table></figure></p>
<p>使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p>
<p>-d参数可以读取本地文本文件的数据，向服务器发送。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">'@data.txt'</span> https://google.com/login</span></span><br></pre></td></tr></table></figure>

<p>上面命令读取data.txt文件的内容，作为数据体向服务器发送。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10安装Mongodb，并配置成服务</title>
    <url>/2019/10/14/Win10%E5%AE%89%E8%A3%85Mongodb%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%88%90%E6%9C%8D%E5%8A%A1/Win10%E5%AE%89%E8%A3%85Mongodb%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%88%90%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>一：先去官网下载对应的版本;<br>二：把bin文件夹拷贝到跟MongoDB目录，然后在根目录下建一个data文件夹存放日志跟数据库，然后data文件夹下建db跟log文件夹，并在log文件夹下新建一个日志文件mongolog.log<br>如下图所示：</p><a id="more"></a>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/6/16c659090f8ce681?w=516&h=304&f=png&s=17920" alt>)<img src="https://user-gold-cdn.xitu.io/2019/8/6/16c6590c733468f9?w=567&h=244&f=png&s=14427" alt>)<img src="https://user-gold-cdn.xitu.io/2019/8/6/16c6590f19426cd6?w=635&h=226&f=png&s=14108" alt></p>
<p>三：在mongodb根目录下见一个配置文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbpath=c:\MongoDb\data\db</span><br><span class="line">logpath=c:\MongoDB\data\log\mongolog.log</span><br><span class="line">logappend=true</span><br><span class="line">auth=false</span><br></pre></td></tr></table></figure>

<p>这就是mongodb.config文件的内容，auth默认为false，不起用密码验证</p>
<p>四：powershell管理员模式定位到bin目录，然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\mongod --config c:\MongoDB\mongodb.config --serviceName MongoDB --install</span><br></pre></td></tr></table></figure>

<p> 这样，服务就安装完了，然后在服务那块右键启动服务，这样mongodb就算安装好了，接下来要设置密码</p>
<p>五.当mongod.exe被关闭时，mongo.exe 就无法连接到数据库了，因此每次想使用mongodb数据库都要开启mongod.exe程序，所以比较麻烦，此时我们可以将MongoDB安装为windows服务</p>
<p>　还是运行cmd，进入bin文件夹，执行下列命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> d:\mongodb\bin&gt;mongod --dbpath <span class="string">"d:\mongodb\data\db"</span> --logpath <span class="string">"d:\mongodb\data\log\MongoDB.log"</span></span></span><br><span class="line">  --install --serviceName "MongoDB"</span><br></pre></td></tr></table></figure>

<p>这里MongoDB.log就是开始建立的日志文件，–serviceName “MongoDB” 服务名为MongoDB<br>接着启动mongodb服务</p>
<h3 id="六-关闭服务和删除进程"><a href="#六-关闭服务和删除进程" class="headerlink" title="六.关闭服务和删除进程"></a>六.关闭服务和删除进程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> d:\mongodb\bin&gt;NET stop MongoDB   (关闭服务)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> d:\mongodb\bin&gt;mongod --dbpath <span class="string">"d:\mongodb\data\db"</span> --logpath <span class="string">"d:\mongodb\data\log\MongoDB.log"</span> --remove --serviceName <span class="string">"MongoDB"</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>(删除，注意不是–install了)</p>
</blockquote>
]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.4安装镜像源和repo源</title>
    <url>/2019/10/14/Centos7.4%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%BA%90%E5%92%8Crepo%E6%BA%90/</url>
    <content><![CDATA[<h3 id="一、国内可选下载镜像源"><a href="#一、国内可选下载镜像源" class="headerlink" title="一、国内可选下载镜像源"></a>一、国内可选下载镜像源</h3><h4 id="1、国内"><a href="#1、国内" class="headerlink" title="1、国内"></a>1、国内</h4><p>163镜像源（推荐选择）<br><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a><br>中国技术科学大学<br><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a><br>Centos官方站点<br><a href="http://vault.centos.org/" target="_blank" rel="noopener">http://vault.centos.org/</a>  </p><a id="more"></a>
<h4 id="2、Centos7-4下载地址"><a href="#2、Centos7-4下载地址" class="headerlink" title="2、Centos7.4下载地址"></a>2、Centos7.4下载地址</h4><p><a href="http://mirrors.163.com/centos/7.4.1708/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">http://mirrors.163.com/centos/7.4.1708/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso</a></p>
<h3 id="二、配置Centos7-4的yum源"><a href="#二、配置Centos7-4的yum源" class="headerlink" title="二、配置Centos7.4的yum源"></a>二、配置Centos7.4的yum源</h3><h4 id="yum所需要使用的repo源如下："><a href="#yum所需要使用的repo源如下：" class="headerlink" title="yum所需要使用的repo源如下："></a>yum所需要使用的repo源如下：</h4><p>在安装好的操作系统中，执行如下命令：<br>vim /etc/yum.repos.d/CentOS-163.repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"><span class="meta">#</span> unless you are manually picking other mirrors.</span><br><span class="line"><span class="meta">#</span> </span><br><span class="line"><span class="meta">#</span> If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="line"><span class="meta">#</span> remarked out baseurl= line instead.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Jeson@imoocc.com</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base - 163.com</span><br><span class="line"><span class="meta">#</span>mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>released updates</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates - 163.com</span><br><span class="line"><span class="meta">#</span>mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras - 163.com</span><br><span class="line"><span class="meta">#</span>mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus - 163.com</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>VMWare 下安装Centos网络设置（局域网配置）</title>
    <url>/2019/10/14/VMWare%20%E4%B8%8B%E5%AE%89%E8%A3%85Centos%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
    <content><![CDATA[<p><strong>最近打算为centos安装一个界面时，发现不能上网。ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 报name or service not known。<br>原来网络配置没设好。</strong></p><a id="more"></a>
<h2 id="一、选择VMWare的NAT模式。"><a href="#一、选择VMWare的NAT模式。" class="headerlink" title="一、选择VMWare的NAT模式。"></a>一、选择VMWare的NAT模式。</h2><p>1）导航栏“编辑”-&gt;“虚拟网络编辑器” -&gt;NAT模式-&gt;NAT设置<br><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf15c295b06b40?w=655&h=743&f=png&s=58854" alt></p>
<blockquote>
<p>记住NAT设置中的子网IP、子网掩码、网关IP三项，接下来配置文件主要是这三项。<br> 嗯，这里记得按确定，我之前没有按确定写好配置后还是不行，不知道为什么。</p>
</blockquote>
<p> 2）编辑网络配置文件。<br>    我的是ens33，不同的人或许会有不同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p>我的是这样的。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf15d9452c028d?w=658&h=248&f=png&s=18226" alt></p>
<p>打开配置文件后，按“i”进行编辑</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf15df2d2f7859?w=406&h=432&f=png&s=25896" alt></p>
<p>更改完后，按“ESC”键，然后输入”:wq”。意思是退出并保存。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>接下来就可以愉快的 ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf15fc53252356?w=666&h=227&f=png&s=19065" alt></p>
<p>3)附文件代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static  #启用静态IP地址</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=eno16777736</span><br><span class="line">UUID=ae0965e7<span class="number">-22</span>b9<span class="number">-45</span>aa<span class="number">-8</span>ec9<span class="number">-3</span>f0a20a85d11</span><br><span class="line">ONBOOT=yes  #开启自动启用网络连接</span><br><span class="line">IPADDR=192.168.8.88  #设置IP地址</span><br><span class="line">NETMASK=255.255.255.0  #设置子网掩码</span><br><span class="line">GATEWAY=192.168.8.254  #设置网关</span><br><span class="line">DNS1=192.168.1.2 #设置主DNS</span><br><span class="line">DNS2=192.168.1.3 #设置备DNS</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH 上传下载文件</title>
    <url>/2019/10/14/SSH%20%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="1、上传本地文件到服务器"><a href="#1、上传本地文件到服务器" class="headerlink" title="1、上传本地文件到服务器"></a>1、上传本地文件到服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /path/filename username@servername:/path/</span><br></pre></td></tr></table></figure><a id="more"></a>

<p>例如scp /var/www/test.php <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/ 把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中</p>
<h3 id="2、从服务器上下载文件"><a href="#2、从服务器上下载文件" class="headerlink" title="2、从服务器上下载文件"></a>2、从服务器上下载文件</h3><p>下载文件我们经常使用wget，但是如果没有http服务，如何从服务器上下载文件呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp username@servername:/path/filename /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure>

<p>例如scp <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/test.txt 把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p>
<h3 id="3、从服务器下载整个目录"><a href="#3、从服务器下载整个目录" class="headerlink" title="3、从服务器下载整个目录"></a>3、从服务器下载整个目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure>

<p>例如:scp -r <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/test /var/www/</p>
<h3 id="4、上传目录到服务器"><a href="#4、上传目录到服务器" class="headerlink" title="4、上传目录到服务器"></a>4、上传目录到服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r local_dir username@servername:remote_dir</span><br></pre></td></tr></table></figure>

<p>例如：scp -r ui <a href="mailto:root@192.168.8.88" target="_blank" rel="noopener">root@192.168.8.88</a>:/var/share/nginx/ (ui 桌面文件，/var/share/nginx/远程文件 );</p>
<blockquote>
<p>上传的时候应该断开连接SSH 会提示输入密码</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 开放端口方法</title>
    <url>/2019/10/14/centos%20%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近在centos上部署了前端项目发现启动后无法通过ip进行访问，经查询原来是防火墙打开了，经过收集学习了相关的操作。</p><a id="more"></a>
<p>Centos升级到7之后，内置的防火墙已经从iptables变成了firewalld。所以，端口的开启还是要从两种情况来说明的，即iptables和firewalld。</p>
<h3 id="一、iptables-centos-6及以前"><a href="#一、iptables-centos-6及以前" class="headerlink" title="一、iptables(centos 6及以前)"></a>一、iptables(centos 6及以前)</h3><p>1.打开/关闭/重启防火墙</p>
<pre><code>开启防火墙(重启后永久生效)：  chkconfig iptables on
关闭防火墙(重启后永久生效)：  chkconfig iptables off
开启防火墙(即时生效，重启后失效)：  service iptables start
关闭防火墙(即时生效，重启后失效)：  service iptables stop
重启防火墙:  service iptables restartd</code></pre><p>2.查看打开的端口</p>
<pre><code>/etc/init.d/iptables status</code></pre><p>3.打开某个端口(以8080为例)</p>
<pre><code>（1）开启端口
iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
（2）保存并重启防火墙
/etc/rc.d/init.d/iptables save
/etc/init.d/iptables restart</code></pre><p>4.打开49152~65534之间的端口</p>
<pre><code>iptables -A INPUT -p tcp --dport 49152:65534 -j ACCEPT
同样，这里需要对设置进行保存，并重启防火墙。</code></pre><p>5.其他打开方式</p>
<pre><code>我们还可以通过修改/etc/sysconfig/iptables文件的方式开启端口，如下
vi /etc/sysconfig/iptables
然后在文件中增加一行
-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</code></pre><p>6.查看启动端口</p>
<pre><code>netstat  -nultp</code></pre><p>7.查看是否开启某个端口</p>
<pre><code>netstat  -anp  |grep  8000</code></pre><p>参数说明:</p>
<ul>
<li>-A 参数就看成是添加一条规则</li>
<li>–p 指定是什么协议，我们常用的tcp 协议，当然也有udp，例如53端口的DNS</li>
<li>–dport 就是目标端口，当数据从外部进入服务器为目标端口</li>
<li>–sport 数据从服务器出去，则为数据源端口使用</li>
<li>–j 就是指定是 ACCEPT -接收 或者 DROP 不接收</li>
</ul>
<h3 id="二、firewalld-centos7"><a href="#二、firewalld-centos7" class="headerlink" title="二、firewalld(centos7)"></a>二、firewalld(centos7)</h3><p>Centos7默认安装了firewalld，如果没有安装的话，可以使用 yum install firewalld firewalld-config进行安装。<br>|命令|解释|<br>|-|-|<br>|1.启动防火墙|systemctl start firewalld |<br>|2.禁用防火墙|systemctl stop firewalld|<br>|3.设置开机启动|systemctl enable firewalld|<br>|4.停止并禁用开机启动|sytemctl disable firewalld|<br>|5.重启防火墙|firewall-cmd –reload|<br>|6.查看状态|systemctl status firewalld或者 firewall-cmd –state|<br>|7.查看版本|firewall-cmd –version|<br>|8.查看帮助|firewall-cmd –help|<br>|9.查看区域信息|firewall-cmd –get-active-zones|<br>|10.查看指定接口所属区域信息|firewall-cmd –get-zone-of-interface=eth0|<br>|11.拒绝所有包|firewall-cmd –panic-on|<br>|12.取消拒绝状态|firewall-cmd –panic-off|<br>|13.查看是否拒绝|firewall-cmd –query-panic|<br>|14.将接口添加到区域(默认接口都在public)|firewall-cmd –zone=public –add-interface=eth0(永久生效再加上 –permanent 然后reload防火墙)|<br>|15.设置默认接口区域|firewall-cmd –set-default-zone=public(立即生效，无需重启)|<br>|16.更新防火墙规则|firewall-cmd –reload或firewall-cmd –complete-reload(两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务)|<br>|17.查看指定区域所有打开的端口|firewall-cmd –zone=public –list-ports|<br>|18.在指定区域打开端口（记得重启防火墙）|firewall-cmd –zone=public –add-port=80/tcp(永久生效再加上 –permanent)|</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos下部署Nginx前端项目</title>
    <url>/2019/10/12/Centos%E4%B8%8B%E9%83%A8%E7%BD%B2Nginx%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><p>centos7 直接只用</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y nginx</span><br></pre></td></tr></table></figure><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>找到nginx安装位置，我的安装位置在/etc/nginx<br><img src="%5Cimages%5Cpasted-2.png" alt="upload successful"><br>其中配置文件（nginx.config），我们可以指定端口 代理配置内容</p><a id="more"></a>



<h3 id="三、-启动"><a href="#三、-启动" class="headerlink" title="三、 启动"></a>三、 启动</h3><p>CentOS 7.5下启动 Nginx 出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx: [error] open() "/run/nginx.pid" failed (2: No such file or directory)</span><br></pre></td></tr></table></figure>

<p>解决方法：找到你的nginx.conf的文件夹目录，然后运行类似如下命令</p>
<h3 id="四、代理"><a href="#四、代理" class="headerlink" title="四、代理"></a>四、代理</h3><p>代理截图</p>
<p><img src="/images/pasted-1.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -c etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>再运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2019/9/3/16cf6091d086ffc4?w=549&h=594&f=png&s=39516" alt></p>
<p>server下是配置内容 listen是具体的代理端口<br>server_name 是本地访问的端口这里项目启动的方式决定了我们代理的端口我们使用ip访问就需要配置一下这里的地址<br>location /api 就是指对应的前端访问的代理<br>例如</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/3/16cf60700837f339?w=782&h=269&f=png&s=27147" alt><br>我们访问的地址是 <a href="http://192.168.8.88/api/" target="_blank" rel="noopener">http://192.168.8.88/api/</a> 就会被代理到 <a href="http://sj.com/api" target="_blank" rel="noopener">http://sj.com/api</a></p>
<p>当然代理也可以配置多个如下：</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/3/16cf610242204d16?w=640&h=611&f=png&s=39254" alt></p>
<h3 id="五、nginx-常用命令"><a href="#五、nginx-常用命令" class="headerlink" title="五、nginx 常用命令"></a>五、nginx 常用命令</h3><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>nginx -s stop</td>
<td>快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</td>
</tr>
<tr>
<td>nginx -s quit</td>
<td>平稳关闭Nginx，保存相关信息，有安排的结束web服务。</td>
</tr>
<tr>
<td>nginx -s reload</td>
<td>因改变了Nginx相关配置，需要重新加载配置而重载。</td>
</tr>
<tr>
<td>nginx -s reopen</td>
<td>重新打开日志文件。</td>
</tr>
<tr>
<td>nginx -c filename</td>
<td>为 Nginx 指定一个配置文件，来代替缺省的。</td>
</tr>
<tr>
<td>nginx -t</td>
<td>不运行，而仅仅测试配置文件。nginx将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</td>
</tr>
<tr>
<td>nginx -v</td>
<td>显示 nginx 的版本。</td>
</tr>
<tr>
<td>nginx -V</td>
<td>显示 nginx 的版本，编译器版本和配置参数。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo+github搭建免费个人博客</title>
    <url>/2019/10/12/%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="1-安装启动"><a href="#1-安装启动" class="headerlink" title="1.安装启动"></a>1.安装启动</h3><p>在GitBash 中操作，输入以下命令，等待安装完成。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><a id="more"></a>


<p>a.安装 hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure>

<p>b.初始化 hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>注意，其中有一个_config.xml文件，这个我们叫做站点根目录配置文件，里面的初始内容如下：（附上中文介绍）<br>c.配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site 站点主配置</span><br><span class="line">title: Hexo  # 网站标题</span><br><span class="line">subtitle:    # 网站副标题</span><br><span class="line">description:   # 网站描述</span><br><span class="line">keywords:      # 可以不填写保持默认</span><br><span class="line">author: John Doe  # 网站拥有者昵称</span><br><span class="line">language:    # 网站语言设置，一般根据依赖的主题而定</span><br><span class="line">timezone:    # 网站时区设置，一般不填写保持默认</span><br><span class="line"></span><br><span class="line"># URL地址链接设置</span><br><span class="line">url: http://yoursite.com   # 网站url设置</span><br><span class="line">root: /                    # 网站根目录链接</span><br><span class="line">permalink: :year/:month/:day/:title/   # 文章链接，默认是按照 /年/月/日/文章标题 设置的链接</span><br><span class="line">permalink_defaults:                    # 默认链接形式</span><br><span class="line"></span><br><span class="line"># Directory  网站主要目录，这里一般不做改动</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing  网站文章设置，同样一般不做改动</span><br><span class="line">new_post_name: :title.md  # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Home page setting  主页设置，一般不做改动</span><br><span class="line">index_generator:</span><br><span class="line">  path: ''</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date  # 首页文章排序，默认是按照文章日期递减</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag  分类设置，一般不做改动</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format  日期设置，一般不做改动</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination  导航页设置，一般不做改动</span><br><span class="line">per_page: 10   # 设置每页展示多少文章</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions  使用的主题名称，可以在这里切换</span><br><span class="line">theme: next  # 此处切换主题名称</span><br><span class="line"></span><br><span class="line"># Deployment  部署，一般选择部署到Github上</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure>

<p>其实到这里来说，我们的 hexo 博客已经做好了！不信？我们执行下面命令看看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//cd到根目录执行</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure>

<p>然后我们打开浏览器，输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>;</p>


<p>d.创建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new "我的第一篇博客"</span><br><span class="line"></span><br><span class="line">//或者可以简写为</span><br><span class="line"></span><br><span class="line">hexo n "我的第一篇博客"</span><br></pre></td></tr></table></figure>

<p>e.创建文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n [我的第一篇博客] 我的第一篇博客</span><br></pre></td></tr></table></figure>

<h3 id="2-上传到github"><a href="#2-上传到github" class="headerlink" title="2.上传到github"></a>2.上传到github</h3><p>a.配置站点配置文件<br>1.打开根目录下站点配置文件_config.yml，配置有关deploy的部分：</p>

<p>b.安装插件<br>此时，直接使用hexo d部署到github，将出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>这是因为需要安装如下插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git  --save</span><br></pre></td></tr></table></figure>

<p>c.部署到github</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="3-关于-标签-分类-归档"><a href="#3-关于-标签-分类-归档" class="headerlink" title="3.关于 标签 分类 归档"></a>3.关于 标签 分类 归档</h3><p>1.主题的 _config.yml 文件中的 menu 中进行匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/      /</span><span class="regexp">/主页</span></span><br><span class="line"><span class="regexp">  categories: /</span>categories <span class="comment">//分类</span></span><br><span class="line">  archives: <span class="regexp">/archives   /</span><span class="regexp">/归档</span></span><br><span class="line"><span class="regexp">  tags: /</span>tags   <span class="comment">//标签</span></span><br><span class="line">  about: <span class="regexp">/about   /</span><span class="regexp">/关于                  （添加此行即可）</span></span><br></pre></td></tr></table></figure>

<p>编辑 about 关于页面 md文件 部署就能看到</p>
<p>2：添加 标签页面<br>使用： hexo new page tags 新建一个 标签 页面。<br>主题的 _config.yml 文件中的 menu 中进行匹配<br>底下代码是一篇包含 标签 文章的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title: 标签测试</span><br><span class="line">tags:</span><br><span class="line">  - Testing                   （这个就是文章的标签了）</span><br><span class="line">  - Another Tag               （这个就是文章的标签了）</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>3：添加 分类页面<br>使用： hexo new page categories 新建一个 分类 页面。<br>主题的 _config.yml 文件中的 menu 中进行匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title: 分类测试</span><br><span class="line">categories:</span><br><span class="line">- hexo                       （这个就是文章的分类了）</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>5：添加 自定义页面<br>使用： hexo new page “guestbook” 新建一个 自定义 页面。<br>主题的 _config.yml 文件中的 menu 中进行匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/      /</span><span class="regexp">/主页</span></span><br><span class="line"><span class="regexp">  categories: /</span>categories <span class="comment">//分类</span></span><br><span class="line">  archives: <span class="regexp">/archives   /</span><span class="regexp">/归档</span></span><br><span class="line"><span class="regexp">  tags: /</span>tags   <span class="comment">//标签</span></span><br><span class="line">  about: <span class="regexp">/about   /</span><span class="regexp">/关于</span></span><br><span class="line"><span class="regexp">  guestbook: /gu</span>estbook    <span class="comment">//自定义             （添加此行即可）</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>centos7 软件安装</title>
    <url>/2019/10/11/centos7%20%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1-安装Mysql"><a href="#1-安装Mysql" class="headerlink" title="1.安装Mysql"></a>1.安装Mysql</h3><p>在要安装的目录下执行一下命令 我这就是进入到/home/money/后执行以下命令</p><p>下载</p><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>yum 安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装mysql服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<p>起动mysql服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>修改密码</p>
<pre><code>第一次安装会给root随机密码 查看 grep &quot;password&quot; /var/log/mysqld.log
进入数据库 mysql -uroot -p密码
修改密码 ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;你要设置的密码&apos;;
(要包含大小写和符号，比较难设置)</code></pre><p>修改mysql语言</p>
<pre><code>首先重新登录mysql，然后输入status：
此处语言并不是utf8,我们退出（输入exit）去修改</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/10/9/16daf118f2fb864a?w=878&h=453&f=png&s=252968" alt></p>
<pre><code>vi /etc/my.cnf
复制代码添加四行代码</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/10/9/16daf16165ad3a9f?w=855&h=656&f=png&s=399749" alt></p>
<p>重启mysql服务,登录后status查看，改成utf8就成功了<br>shell service mysqld restart<br>操作命令：<br>启动mysql服务 service mysqld start 重启mysql服务 service mysqld restart 查看状态服务状态 service mysqld status</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Linux操作系统</title>
    <url>/2019/10/11/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>说明：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。</p>
</blockquote>
<h3 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。</p>
<a id="more"></a>
<h4 id="没有操作系统（手工操作）"><a href="#没有操作系统（手工操作）" class="headerlink" title="没有操作系统（手工操作）"></a>没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。</p>
<h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p>
<h4 id="分时系统和实时系统"><a href="#分时系统和实时系统" class="headerlink" title="分时系统和实时系统"></a>分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p>
<h4 id="通用操作系统"><a href="#通用操作系统" class="headerlink" title="通用操作系统"></a>通用操作系统</h4><ol>
<li><p>1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。</p>
</li>
<li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p>
</li>
<li><p>1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。</p>
<blockquote>
<p>注：很难想象，Unix这么伟大的系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。</p>
</blockquote>
</li>
<li><p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9c604198f3f7?w=1258&h=998&f=png&s=758782" alt></p>
<ol start="5">
<li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p>
</li>
<li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p>
</li>
<li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p>
</li>
<li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9c656ac177f3?w=1600&h=1071&f=png&s=1641432" alt></p>
<ol start="9">
<li>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9c672a4cc228?w=300&h=360&f=png&s=222701" alt></p>
<p>下图是Unix操作系统家族的图谱。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9c68f46d7725?w=1870&h=1238&f=png&s=431809" alt></p>
<h3 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p>
<p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free" target="_blank" rel="noopener">点击这里</a>）。</p>
<h3 id="Linux系统优点"><a href="#Linux系统优点" class="headerlink" title="Linux系统优点"></a>Linux系统优点</h3><ol>
<li>通用操作系统，不跟特定的硬件绑定。</li>
<li>用C语言编写，可移植性强，有内核编程接口。</li>
<li>支持多用户和多任务，支持安全的分层文件系统。</li>
<li>大量的实用程序，完善的网络功能以及强大的支持文档。</li>
<li>可靠的安全性和良好的稳定性，对开发者更友好。</li>
</ol>
<h3 id="Linux系统发行版本"><a href="#Linux系统发行版本" class="headerlink" title="Linux系统发行版本"></a>Linux系统发行版本</h3><ol>
<li><a href="https://www.redhat.com/en" target="_blank" rel="noopener">Redhat</a></li>
<li><a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></li>
<li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a></li>
<li><a href="https://getfedora.org/" target="_blank" rel="noopener">Fedora</a></li>
<li><a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a></li>
<li><a href="https://www.opensuse.org/" target="_blank" rel="noopener">openSUSE</a></li>
</ol>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令名称 [命名参数] [命令对象]</span><br></pre></td></tr></table></figure>

<ol>
<li><p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>/ <strong>lastb</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# w</span><br><span class="line"> 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s w</span><br><span class="line">jackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash</span><br><span class="line">[root ~]# who</span><br><span class="line">root     pts/0        2018-04-12 23:03 (182.139.66.250)</span><br><span class="line">jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)</span><br><span class="line">[root ~]# who am i</span><br><span class="line">root     pts/0        2018-04-12 23:03 (182.139.66.250)</span><br><span class="line">[root ~]# who mom likes</span><br><span class="line">root     pts/0        2018-04-12 23:03 (182.139.66.250)</span><br><span class="line">[root ~]# last</span><br><span class="line">root     pts/0        117.136.63.184   Sun May 26 18:57   still logged in</span><br><span class="line">reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)</span><br><span class="line">root     pts/4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)</span><br><span class="line">root     pts/4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)</span><br><span class="line">root     pts/3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)</span><br><span class="line">root     pts/2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)</span><br><span class="line">root     pts/0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看自己使用的Shell - <strong>ps</strong>。</p>
<p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line"> 3531 pts/0    00:00:00 bash</span><br><span class="line"> 3553 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看命令的说明和位置 - <strong>whatis</strong> / <strong>which</strong> / <strong>whereis</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# whatis ps</span><br><span class="line">ps (1)        - report a snapshot of the current processes.</span><br><span class="line">[root ~]# whatis python</span><br><span class="line">python (1)    - an interpreted, interactive, object-oriented programming language</span><br><span class="line">[root ~]# whereis ps</span><br><span class="line">ps: /usr/bin/ps /usr/share/man/man1/ps.1.gz</span><br><span class="line">[root ~]# whereis python</span><br><span class="line">python: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz</span><br><span class="line">[root ~]# which ps</span><br><span class="line">/usr/bin/ps</span><br><span class="line">[root ~]# which python</span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除屏幕上显示的内容 - <strong>clear</strong>。</p>
</li>
<li><p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>help</strong> / <strong>apropos</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --help</span><br><span class="line">Usage:</span><br><span class="line"> ps [options]</span><br><span class="line"> Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;'</span><br><span class="line">  or 'ps --help &lt;s|l|o|t|m|a&gt;'</span><br><span class="line"> for additional help text.</span><br><span class="line">For more details see ps(1).</span><br><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# man ps</span><br><span class="line">PS(1)                                User Commands                                PS(1)</span><br><span class="line">NAME</span><br><span class="line">       ps - report a snapshot of the current processes.</span><br><span class="line">SYNOPSIS</span><br><span class="line">       ps [options]</span><br><span class="line">DESCRIPTION</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# uname</span><br><span class="line">Linux</span><br><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# hostname</span><br><span class="line">izwz97tbgo9lkabnat2lo8z</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p>
</blockquote>
</li>
<li><p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# date</span><br><span class="line">Wed Jun 20 12:53:19 CST 2018</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal</span><br><span class="line">      June 2018</span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">                1  2</span><br><span class="line"> 3  4  5  6  7  8  9</span><br><span class="line">10 11 12 13 14 15 16</span><br><span class="line">17 18 19 20 21 22 23</span><br><span class="line">24 25 26 27 28 29 30</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017</span><br><span class="line">      May 2017</span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">    1  2  3  4  5  6</span><br><span class="line"> 7  8  9 10 11 12 13</span><br><span class="line">14 15 16 17 18 19 20</span><br><span class="line">21 22 23 24 25 26 27</span><br><span class="line">28 29 30 31</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启和关机 - <strong>reboot</strong> / <strong>shutdown</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# shutdown -h +5</span><br><span class="line">Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use 'shutdown -c' to cancel.</span><br><span class="line">[root ~]#</span><br><span class="line">Broadcast message from root (Sun 2019-05-26 19:29:27 CST):</span><br><span class="line"></span><br><span class="line">The system is going down for power-off at Sun 2019-05-26 19:34:27 CST!</span><br><span class="line">[root ~]# shutdown -c</span><br><span class="line"></span><br><span class="line">Broadcast message from root (Sun 2019-05-26 19:30:22 CST):</span><br><span class="line"></span><br><span class="line">The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST!</span><br><span class="line">[root ~]# shutdown -r 23:58</span><br><span class="line">Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use 'shutdown -c' to cancel.</span><br><span class="line">[root ~]# shutdown -c</span><br><span class="line"></span><br><span class="line">Broadcast message from root (Sun 2019-05-26 19:31:06 CST):</span><br><span class="line"></span><br><span class="line">The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p>
</blockquote>
</li>
<li><p>退出登录 -  <strong>exit</strong> / <strong>logout</strong>。</p>
</li>
<li><p>查看历史命令 - <strong>history</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history</span><br><span class="line">...</span><br><span class="line">452  ls</span><br><span class="line">453  cd Python-3.6.5/</span><br><span class="line">454  clear</span><br><span class="line">455  history</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p>
</blockquote>
</li>
</ol>
<h3 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h3><h4 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h4><ol>
<li><p>创建/删除空目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# mkdir abc</span><br><span class="line">[root ~]# mkdir -p xyz/abc</span><br><span class="line">[root ~]# rmdir abc</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# touch readme.txt</span><br><span class="line">[root ~]# touch error.txt</span><br><span class="line">[root ~]# rm error.txt</span><br><span class="line">rm: remove regular empty file ‘error.txt’? y</span><br><span class="line">[root ~]# rm -rf xyz</span><br></pre></td></tr></table></figure>

<ul>
<li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul>
<li>更改内容的时间 - mtime。</li>
<li>更改权限的时间 - ctime。</li>
<li>最后访问时间 - atime。</li>
</ul>
</li>
<li><code>rm</code>的几个重要参数：<ul>
<li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li>
<li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li>
<li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li>
</ul>
</li>
</ul>
</li>
<li><p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p>
<blockquote>
<p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p>
</blockquote>
</li>
<li><p>查看目录内容 - <strong>ls</strong>。</p>
<ul>
<li><code>-l</code>：以长格式查看文件和目录。</li>
<li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li>
<li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li>
<li><code>-d</code>：只列出目录，不列出其他内容。</li>
<li><code>-S</code> / <code>-t</code>：按大小/时间排序。</li>
</ul>
</li>
<li><p>查看文件内容 - <strong>cat</strong> / <strong>tac</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong> / <strong>rev</strong> / <strong>od</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# wget http://www.sohu.com/ -O sohu.html</span><br><span class="line">--2018-06-20 18:42:34--  http://www.sohu.com/</span><br><span class="line">Resolving www.sohu.com (www.sohu.com)... 14.18.240.6</span><br><span class="line">Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 212527 (208K) [text/html]</span><br><span class="line">Saving to: ‘sohu.html’</span><br><span class="line"><span class="meta">100%</span><span class="bash">[==================================================&gt;] 212,527     --.-K/s   <span class="keyword">in</span> 0.03s</span></span><br><span class="line">2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527]</span><br><span class="line">[root ~]# cat sohu.html</span><br><span class="line">...</span><br><span class="line">[root ~]# head -10 sohu.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;搜狐&lt;/title&gt;</span><br><span class="line">&lt;meta name="Keywords" content="搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧"/&gt;</span><br><span class="line">&lt;meta name="Description" content="搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。" /&gt;</span><br><span class="line">&lt;meta name="shenma-site-verification" content="1237e4d02a3d8d73e96cbd97b699e9c3_1504254750"&gt;</span><br><span class="line">&lt;meta charset="utf-8"/&gt;</span><br><span class="line">&lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/&gt;</span><br><span class="line">[root ~]# tail -2 sohu.html</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root ~]# less sohu.html</span><br><span class="line">...</span><br><span class="line">[root ~]# cat -n sohu.html | more</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p>
</blockquote>
</li>
<li><p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# mkdir backup</span><br><span class="line">[root ~]# cp sohu.html backup/</span><br><span class="line">[root ~]# cd backup</span><br><span class="line">[root backup]# ls</span><br><span class="line">sohu.html</span><br><span class="line">[root backup]# mv sohu.html sohu_index.html</span><br><span class="line">[root backup]# ls</span><br><span class="line">sohu_index.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件重命名 - <strong>rename</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name "*.html"</span><br><span class="line">/root/sohu.html</span><br><span class="line">/root/backup/sohu_index.html</span><br><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print</span><br><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k</span><br><span class="line">[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name "*.swp" -delete</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep "&lt;script&gt;" sohu.html -n</span><br><span class="line">20:&lt;script&gt;</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \&lt;\/?script.*\&gt; sohu.html -n</span><br><span class="line">20:&lt;script&gt;</span><br><span class="line">22:&lt;/script&gt;</span><br><span class="line">24:&lt;script src="//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js"&gt;&lt;/script&gt;</span><br><span class="line">25:&lt;script src="//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js"&gt;&lt;/script&gt;</span><br><span class="line">26:&lt;script src="//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js"&gt;&lt;/script&gt;</span><br><span class="line">29:&lt;script type="text/javascript"&gt;</span><br><span class="line">52:&lt;/script&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p>
</blockquote>
</li>
<li><p>创建链接和查看链接 - <strong>ln</strong> / <strong>readlink</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html</span><br><span class="line">-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html</span><br><span class="line">-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html</span><br><span class="line">-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfo</span><br><span class="line">lrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfo</span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release</span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p>
</blockquote>
</li>
<li><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line">--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line">Resolving download.redis.io (download.redis.io)... 109.74.203.151</span><br><span class="line">Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1738465 (1.7M) [application/x-gzip]</span><br><span class="line">Saving to: ‘redis-4.0.10.tar.gz’</span><br><span class="line"><span class="meta">100%</span><span class="bash">[==================================================&gt;] 1,738,465   70.1KB/s   <span class="keyword">in</span> 74s</span></span><br><span class="line">2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465]</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*</span><br><span class="line">redis-4.0.10.tar.gz</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz</span><br><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*</span><br><span class="line">redis-4.0.10.tar</span><br></pre></td></tr></table></figure>
</li>
<li><p>归档和解归档 - <strong>tar</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tar</span><br><span class="line">redis-4.0.10/</span><br><span class="line">redis-4.0.10/.gitignore</span><br><span class="line">redis-4.0.10/00-RELEASENOTES</span><br><span class="line">redis-4.0.10/BUGS</span><br><span class="line">redis-4.0.10/CONTRIBUTING</span><br><span class="line">redis-4.0.10/COPYING</span><br><span class="line">redis-4.0.10/INSTALL</span><br><span class="line">redis-4.0.10/MANIFESTO</span><br><span class="line">redis-4.0.10/Makefile</span><br><span class="line">redis-4.0.10/README.md</span><br><span class="line">redis-4.0.10/deps/</span><br><span class="line">redis-4.0.10/deps/Makefile</span><br><span class="line">redis-4.0.10/deps/README.md</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p>
</blockquote>
</li>
<li><p>将标准输入转成命令行参数 - <strong>xargs</strong>。</p>
<p>下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name "*.html" | xargs rm -f</span><br></pre></td></tr></table></figure>

<p>下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p>
</blockquote>
</li>
<li><p>显示文件或目录 - <strong>basename</strong> / <strong>dirname</strong>。</p>
</li>
<li><p>其他相关工具。</p>
<ul>
<li><strong>sort</strong> - 对内容排序</li>
<li><strong>uniq</strong> - 去掉相邻重复内容</li>
<li><strong>tr</strong> - 替换指定内容为新内容</li>
<li><strong>cut</strong> / <strong>paste</strong> - 剪切/黏贴内容</li>
<li><strong>split</strong> - 拆分文件</li>
<li><strong>file</strong> - 判断文件类型</li>
<li><strong>wc</strong> - 统计文件行数、单词数、字节数</li>
<li><strong>iconv</strong> - 编码转换</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# cat foo.txt</span><br><span class="line">grape</span><br><span class="line">apple</span><br><span class="line">pitaya</span><br><span class="line">[root ~]# cat bar.txt</span><br><span class="line">100</span><br><span class="line">200</span><br><span class="line">300</span><br><span class="line">400</span><br><span class="line">[root ~]# paste foo.txt bar.txt</span><br><span class="line">grape   100</span><br><span class="line">apple   200</span><br><span class="line">pitaya  300</span><br><span class="line">        400</span><br><span class="line">[root ~]# paste foo.txt bar.txt &gt; hello.txt</span><br><span class="line">[root ~]# cut -b 4-8 hello.txt</span><br><span class="line">pe      10</span><br><span class="line">le      20</span><br><span class="line">aya     3</span><br><span class="line">0</span><br><span class="line">[root ~]# cat hello.txt | tr '\t' ','</span><br><span class="line">grape,100</span><br><span class="line">apple,200</span><br><span class="line">pitaya,300</span><br><span class="line">,400</span><br><span class="line">[root ~]# split -l 100 sohu.html hello</span><br><span class="line">[root ~]# wget https://www.baidu.com/img/bd_logo1.png</span><br><span class="line">[root ~]# file bd_logo1.png</span><br><span class="line">bd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced</span><br><span class="line">[root ~]# wc sohu.html</span><br><span class="line">  2979   6355 212527 sohu.html</span><br><span class="line">[root ~]# wc -l sohu.html</span><br><span class="line">2979 sohu.html</span><br><span class="line">[root ~]# wget http://www.qq.com -O qq.html</span><br><span class="line">[root ~]# iconv -f gb2312 -t utf-8 qq.html</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><ol>
<li><p>管道的使用 - <strong>|</strong>。</p>
<p>例子：查找当前目录下文件个数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# find ./ | wc -l</span><br><span class="line">6152</span><br></pre></td></tr></table></figure>

<p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ls | cat -n</span><br><span class="line">     1  dump.rdb</span><br><span class="line">     2  mongodb-3.6.5</span><br><span class="line">     3  Python-3.6.5</span><br><span class="line">     4  redis-3.2.11</span><br><span class="line">     5  redis.conf</span><br></pre></td></tr></table></figure>

<p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出重定向和错误重定向 - <strong>&gt;</strong> / <strong>&gt;&gt;</strong> / <strong>2&gt;</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# cat readme.txt</span><br><span class="line">banana</span><br><span class="line">apple</span><br><span class="line">grape</span><br><span class="line">apple</span><br><span class="line">grape</span><br><span class="line">watermelon</span><br><span class="line">pear</span><br><span class="line">pitaya</span><br><span class="line">[root ~]# cat readme.txt | sort | uniq &gt; result.txt</span><br><span class="line">[root ~]# cat result.txt</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">grape</span><br><span class="line">pear</span><br><span class="line">pitaya</span><br><span class="line">watermelon</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入重定向 - <strong>&lt;</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# echo 'hello, world!' &gt; hello.txt</span><br><span class="line">[root ~]# wall &lt; hello.txt</span><br><span class="line">[root ~]#</span><br><span class="line">Broadcast message from root (Wed Jun 20 19:43:05 2018):</span><br><span class="line">hello, world!</span><br><span class="line">[root ~]# echo 'I will show you some code.' &gt;&gt; hello.txt</span><br><span class="line">[root ~]# wall &lt; hello.txt</span><br><span class="line">[root ~]#</span><br><span class="line">Broadcast message from root (Wed Jun 20 19:43:55 2018):</span><br><span class="line">hello, world!</span><br><span class="line">I will show you some code.</span><br></pre></td></tr></table></figure>
</li>
<li><p>多重定向 - <strong>tee</strong>。</p>
<p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ls | tee -a ls.txt</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><ol>
<li><p><strong>alias</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# alias ll='ls -l'</span><br><span class="line">[root ~]# alias frm='rm -rf'</span><br><span class="line">[root ~]# ll</span><br><span class="line">...</span><br><span class="line">drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc</span><br><span class="line">...</span><br><span class="line">[root ~]# frm abc</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>unalias</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# unalias frm</span><br><span class="line">[root ~]# frm sohu.html</span><br><span class="line">-bash: frm: command not found</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><ol>
<li><p>字符流编辑器 - <strong>sed</strong>。</p>
<p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# cat -n fruit.txt</span><br><span class="line">     1  banana</span><br><span class="line">     2  grape</span><br><span class="line">     3  apple</span><br><span class="line">     4  watermelon</span><br><span class="line">     5  orange</span><br></pre></td></tr></table></figure>

<p>接下来，我们在第2行后面添加一个pitaya。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sed '2a pitaya' fruit.txt</span><br><span class="line">banana</span><br><span class="line">grape</span><br><span class="line">pitaya</span><br><span class="line">apple</span><br><span class="line">watermelon</span><br><span class="line">orange</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p>
</blockquote>
<p>在第2行前面插入一个waxberry。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sed '2i waxberry' fruit.txt</span><br><span class="line">banana</span><br><span class="line">waxberry</span><br><span class="line">grape</span><br><span class="line">apple</span><br><span class="line">watermelon</span><br><span class="line">orange</span><br></pre></td></tr></table></figure>

<p>删除第3行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sed '3d' fruit.txt</span><br><span class="line">banana</span><br><span class="line">grape</span><br><span class="line">watermelon</span><br><span class="line">orange</span><br></pre></td></tr></table></figure>

<p>删除第2行到第4行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sed '2,4d' fruit.txt</span><br><span class="line">banana</span><br><span class="line">orange</span><br></pre></td></tr></table></figure>

<p>将文本中的字符a替换为@。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sed 's#a#@#' fruit.txt</span><br><span class="line">b@nana</span><br><span class="line">gr@pe</span><br><span class="line">@pple</span><br><span class="line">w@termelon</span><br><span class="line">or@nge</span><br></pre></td></tr></table></figure>

<p>将文本中的字符a替换为@，使用全局模式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sed 's#a#@#g' fruit.txt</span><br><span class="line">b@n@n@</span><br><span class="line">gr@pe</span><br><span class="line">@pple</span><br><span class="line">w@termelon</span><br><span class="line">or@nge</span><br></pre></td></tr></table></figure>
</li>
<li><p>模式匹配和处理语言 - <strong>awk</strong>。</p>
<p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p>
<p>假设有一个名为fruit2.txt的文件，内容如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# cat fruit2.txt</span><br><span class="line">1       banana      120</span><br><span class="line">2       grape       500</span><br><span class="line">3       apple       1230</span><br><span class="line">4       watermelon  80</span><br><span class="line">5       orange      400</span><br></pre></td></tr></table></figure>

<p>显示文件的第3行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# awk 'NR==3' fruit2.txt</span><br><span class="line">3       apple       1230</span><br></pre></td></tr></table></figure>

<p>显示文件的第2列。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# awk '&#123;print $2&#125;' fruit2.txt</span><br><span class="line">banana</span><br><span class="line">grape</span><br><span class="line">apple</span><br><span class="line">watermelon</span><br><span class="line">orange</span><br></pre></td></tr></table></figure>

<p>显示文件的最后一列。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# awk '&#123;print $NF&#125;' fruit2.txt</span><br><span class="line">120</span><br><span class="line">500</span><br><span class="line">1230</span><br><span class="line">80</span><br><span class="line">400</span><br></pre></td></tr></table></figure>

<p>输出末尾数字大于等于300的行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# awk '&#123;if($3 &gt;= 300) &#123;print $0&#125;&#125;' fruit2.txt</span><br><span class="line">2       grape       500</span><br><span class="line">3       apple       1230</span><br><span class="line">5       orange      400</span><br></pre></td></tr></table></figure>

<p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p>
</li>
</ol>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol>
<li><p>创建和删除用户 - <strong>useradd</strong> / <strong>userdel</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root home]# useradd hellokitty</span><br><span class="line">[root home]# userdel hellokitty</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-d</code> - 创建用户时为用户指定用户主目录</li>
<li><code>-g</code> - 创建用户时指定用户所属的用户组</li>
</ul>
</li>
<li><p>创建和删除用户组 - <strong>groupadd</strong> / <strong>groupdel</strong>。</p>
<blockquote>
<p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p>
</blockquote>
</li>
<li><p>修改密码 - <strong>passwd</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# passwd hellokitty</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p>
</blockquote>
<ul>
<li><code>-l</code> / <code>-u</code> - 锁定/解锁用户。</li>
<li><code>-d</code> - 清除用户密码。</li>
<li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li>
<li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li>
</ul>
</li>
<li><p>查看和修改密码有效期 - <strong>chage</strong>。</p>
<p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后15天禁用该用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chage -M 100 -W 15 -I 15 hellokitty</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换用户 - <strong>su</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# su hellokitty</span><br><span class="line">[hellokitty root]$</span><br></pre></td></tr></table></figure>
</li>
<li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hellokitty ~]$ ls /root</span><br><span class="line">ls: cannot open directory /root: Permission denied</span><br><span class="line">[hellokitty ~]$ sudo ls /root</span><br><span class="line">[sudo] password for hellokitty:</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p>
</blockquote>
</li>
<li><p>编辑sudoers文件 - <strong>visudo</strong>。</p>
<p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">## Allow root <span class="keyword">to</span> run any commands anywhere</span><br><span class="line">root    <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)   <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">## Allows members <span class="keyword">of</span> the <span class="symbol">'sys</span>' <span class="keyword">group</span> <span class="keyword">to</span> run networking, software,</span><br><span class="line">## service management apps <span class="keyword">and</span> more.</span><br><span class="line"># %sys <span class="keyword">ALL</span> = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span><br><span class="line">## Allows people <span class="keyword">in</span> <span class="keyword">group</span> wheel <span class="keyword">to</span> run <span class="keyword">all</span> commands</span><br><span class="line">%wheel  <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)   <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">## Same thing without a password</span><br><span class="line"># %wheel    <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)   NOPASSWD: <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">## Allows members <span class="keyword">of</span> the users <span class="keyword">group</span> <span class="keyword">to</span> mount <span class="keyword">and</span> unmount the</span><br><span class="line">## cdrom as root</span><br><span class="line"># %users  <span class="keyword">ALL</span>=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom</span><br><span class="line"></span><br><span class="line">## Allows members <span class="keyword">of</span> the users <span class="keyword">group</span> <span class="keyword">to</span> shutdown this system</span><br><span class="line"># %users  localhost=/sbin/shutdown -h now</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示用户与用户组的信息 - <strong>id</strong>。</p>
</li>
<li><p>给其他用户发消息 -<strong>write</strong> / <strong>wall</strong>。</p>
<p>发送方：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# write hellokitty</span><br><span class="line">Dinner is on me.</span><br><span class="line">Call me at 6pm.</span><br></pre></td></tr></table></figure>

<p>接收方：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hellokitty ~]$</span><br><span class="line">Message from root on pts/0 at 17:41 ...</span><br><span class="line">Dinner is on me.</span><br><span class="line">Call me at 6pm.</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看/设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hellokitty ~]$ mesg</span><br><span class="line">is y</span><br><span class="line">[hellokitty ~]$ mesg n</span><br><span class="line">[hellokitty ~]$ mesg</span><br><span class="line">is n</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="文件和路径"><a href="#文件和路径" class="headerlink" title="文件和路径"></a>文件和路径</h4><ol>
<li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li>
<li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li>
<li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li>
</ol>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ol>
<li>/bin - 基本命令的二进制文件。</li>
<li>/boot - 引导加载程序的静态文件。</li>
<li>/dev - 设备文件。</li>
<li><strong>/etc</strong> - 配置文件。</li>
<li>/home - 普通用户主目录的父目录。</li>
<li>/lib - 共享库文件。</li>
<li>/lib64 - 共享64位库文件。</li>
<li>/lost+found - 存放未链接文件。</li>
<li>/media - 自动识别设备的挂载目录。</li>
<li>/mnt - 临时挂载文件系统的挂载点。</li>
<li>/opt - 可选插件软件包安装位置。</li>
<li>/proc -  内核和进程信息。</li>
<li><strong>/root</strong> - 超级管理员用户主目录。</li>
<li>/run - 存放系统运行时需要的东西。</li>
<li>/sbin - 超级用户的二进制文件。</li>
<li>/sys - 设备的伪文件系统。</li>
<li>/tmp - 临时文件夹。</li>
<li><strong>/usr</strong> - 用户应用目录。</li>
<li>/var - 变量数据目录。</li>
</ol>
<h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol>
<li><p><strong>chmod</strong> - 改变文件模式比特。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ls -l</span><br><span class="line">...</span><br><span class="line">-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html</span><br><span class="line">...</span><br><span class="line">[root ~]# chmod g+w,o+w sohu.html</span><br><span class="line">[root ~]# ls -l</span><br><span class="line">...</span><br><span class="line">-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html</span><br><span class="line">...</span><br><span class="line">[root ~]# chmod 644 sohu.html</span><br><span class="line">[root ~]# ls -l</span><br><span class="line">...</span><br><span class="line">-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p>
</blockquote>
<p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9cb6a3b46d82?w=1830&h=590&f=png&s=72643" alt></p>
<ol start="2">
<li><p><strong>chown</strong> - 改变文件所有者。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ls -l</span><br><span class="line">...</span><br><span class="line">-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt</span><br><span class="line">...</span><br><span class="line">[root ~]# chown hellokitty readme.txt</span><br><span class="line">[root ~]# ls -l</span><br><span class="line">...</span><br><span class="line">-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chgrp</strong> - 改变用户组。</p>
</li>
</ol>
<h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><ol>
<li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  5.0G   33G  14% /</span><br><span class="line">devtmpfs        486M     0  486M   0% /dev</span><br><span class="line">tmpfs           497M     0  497M   0% /dev/shm</span><br><span class="line">tmpfs           497M  356K  496M   1% /run</span><br><span class="line">tmpfs           497M     0  497M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           100M     0  100M   0% /run/user/0</span><br></pre></td></tr></table></figure>
</li>
<li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# fdisk -l</span><br><span class="line">Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x000a42f4</span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1   *        2048    83884031    41940992   83  Linux</span><br><span class="line">Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>
</li>
<li><p>磁盘分区工具 - <strong>parted</strong>。</p>
</li>
<li><p>格式化文件系统 - <strong>mkfs</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# mkfs -t ext4 -v /dev/sdb</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-t</code> - 指定文件系统的类型。</li>
<li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li>
<li><code>-v</code> - 显示详细信息。</li>
</ul>
</li>
<li><p>文件系统检查 - <strong>fsck</strong>。</p>
</li>
<li><p>转换或拷贝文件 - <strong>dd</strong>。</p>
</li>
<li><p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p>
</li>
<li><p>创建/激活/关闭交换分区 - <strong>mkswap</strong> / <strong>swapon</strong> / <strong>swapoff</strong>。</p>
</li>
</ol>
<blockquote>
<p>说明：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p>
</blockquote>
<h3 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 - vim"></a>编辑器 - vim</h3><ol>
<li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# vim guess.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p>
</li>
<li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p>
</li>
<li><p>光标操作。</p>
<ul>
<li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li>
<li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li>
<li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li>
</ul>
</li>
<li><p>文本操作。</p>
<ul>
<li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li>
<li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li>
<li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li>
<li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li>
</ul>
</li>
<li><p>查找和替换。</p>
<ul>
<li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li>
<li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul>
<li><code>g</code> - global：全局匹配。</li>
<li><code>i</code> - ignore case：忽略大小写匹配。</li>
<li><code>c</code> - confirm：替换时需要确认。</li>
<li><code>e</code> - error：忽略错误。</li>
</ul>
</li>
</ul>
</li>
<li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p>
<ul>
<li><p>设置Tab键的空格数：<code>set ts=4</code></p>
</li>
<li><p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p>
</li>
<li><p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p>
</li>
<li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p>
</li>
<li><p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p>
<blockquote>
<p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>高级技巧</p>
<ul>
<li><p>比较多个文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# vim -d foo.txt bar.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9ca04b4e2617?w=798&h=596&f=png&s=53971" alt></p>
</li>
<li><p>打开多个文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# vim foo.txt bar.txt hello.txt</span><br></pre></td></tr></table></figure>

<p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p>
</li>
<li><p>拆分和切换窗口。</p>
<p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p>
</li>
</ul>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9c74fe5854c3?w=2220&h=1250&f=png&s=374526" alt></p>
<ul>
<li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p>
<ul>
<li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p>
<p><code>:map &lt;F4&gt; gg10000dd</code>。</p>
<p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p>
<p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p>
</li>
</ul>
<blockquote>
<p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p>
</blockquote>
</li>
<li><p>录制宏。</p>
<ul>
<li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p>
</li>
<li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p>
</li>
<li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p>
</li>
<li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p>
</li>
<li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim" target="_blank" rel="noopener">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/11/16db9c7ca778622f?w=1810&h=1160&f=png&s=232150" alt></p>
<h3 id="软件安装和配置"><a href="#软件安装和配置" class="headerlink" title="软件安装和配置"></a>软件安装和配置</h3><h4 id="使用包管理工具"><a href="#使用包管理工具" class="headerlink" title="使用包管理工具"></a>使用包管理工具</h4><ol>
<li><strong>yum</strong> - Yellowdog Updater Modified。<ul>
<li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li>
<li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li>
<li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li>
<li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li>
<li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li>
<li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li>
<li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li>
</ul>
</li>
<li><strong>rpm</strong> - Redhat Package Manager。<ul>
<li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li>
<li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li>
<li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li>
</ul>
</li>
</ol>
<p>下面以Nginx为例，演示如何使用yum安装软件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# yum -y install nginx</span><br><span class="line">...</span><br><span class="line">Installed:</span><br><span class="line">  nginx.x86_64 1:1.12.2-2.el7</span><br><span class="line">Dependency Installed:</span><br><span class="line">  nginx-all-modules.noarch 1:1.12.2-2.el7</span><br><span class="line">  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7</span><br><span class="line">  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7</span><br><span class="line">  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7</span><br><span class="line">  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7</span><br><span class="line">  nginx-mod-mail.x86_64 1:1.12.2-2.el7</span><br><span class="line">  nginx-mod-stream.x86_64 1:1.12.2-2.el7</span><br><span class="line">Complete!</span><br><span class="line">[root ~]# yum info nginx</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : nginx</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Epoch       : 1</span><br><span class="line">Version     : 1.12.2</span><br><span class="line">Release     : 2.el7</span><br><span class="line">Size        : 1.5 M</span><br><span class="line">Repo        : installed</span><br><span class="line">From repo   : epel</span><br><span class="line">Summary     : A high performance web server and reverse proxy server</span><br><span class="line">URL         : http://nginx.org/</span><br><span class="line">License     : BSD</span><br><span class="line">Description : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and</span><br><span class="line">            : IMAP protocols, with a strong focus on high concurrency, performance and low</span><br><span class="line">            : memory usage.</span><br><span class="line">[root ~]# nginx -v</span><br><span class="line">nginx version: nginx/1.12.2</span><br></pre></td></tr></table></figure>

<p>移除Nginx。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# yum -y remove nginx</span><br></pre></td></tr></table></figure>

<p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root mysql]# ls</span><br><span class="line">mysql-community-client-5.7.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-5.7.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-5.7.22-1.el7.x86_64.rpm</span><br><span class="line">[root mysql]# yum -y remove mariadb-libs</span><br><span class="line">[root mysql]# yum -y install libaio</span><br><span class="line">[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">...</span><br><span class="line">[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">...</span><br><span class="line">[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">...</span><br><span class="line">[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：由于MySQL和<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I/O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">维基百科</a>上关于MariaDB的介绍。</p>
</blockquote>
<p>移除安装的MySQL。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# rpm -qa | grep mysql | xargs rpm -e</span><br></pre></td></tr></table></figure>

<h4 id="下载解压配置环境变量"><a href="#下载解压配置环境变量" class="headerlink" title="下载解压配置环境变量"></a>下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz</span><br><span class="line">--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz</span><br><span class="line">Resolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...</span><br><span class="line">Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 100564462 (96M) [application/x-gzip]</span><br><span class="line">Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’</span><br><span class="line"><span class="meta">100%</span><span class="bash">[==================================================&gt;] 100,564,462  630KB/s   <span class="keyword">in</span> 2m 9s</span></span><br><span class="line">2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462]</span><br><span class="line">[root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz</span><br><span class="line">[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tar</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/README</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICES</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/MPL-2</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodump</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestore</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexport</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimport</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongostat</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongotop</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/bsondump</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongofiles</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplay</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperf</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongod</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongos</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/mongo</span><br><span class="line">mongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass</span><br><span class="line">[root ~]# vim .bash_profile</span><br><span class="line">...</span><br><span class="line">PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/bin</span><br><span class="line">export PATH</span><br><span class="line">...</span><br><span class="line">[root ~]# source .bash_profile</span><br><span class="line">[root ~]# mongod --version</span><br><span class="line">db version v3.6.5</span><br><span class="line">git version: a20ecd3e3a174162052ff99913bc2ca9a839d618</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">allocator: tcmalloc</span><br><span class="line">modules: none</span><br><span class="line">build environment:</span><br><span class="line">    distmod: rhel70</span><br><span class="line">    distarch: x86_64</span><br><span class="line">    target_arch: x86_64</span><br><span class="line">[root ~]# mongo --version</span><br><span class="line">MongoDB shell version v3.6.5</span><br><span class="line">git version: a20ecd3e3a174162052ff99913bc2ca9a839d618</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">allocator: tcmalloc</span><br><span class="line">modules: none</span><br><span class="line">build environment:</span><br><span class="line">    distmod: rhel70</span><br><span class="line">    distarch: x86_64</span><br><span class="line">    target_arch: x86_64</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/" target="_blank" rel="noopener">官方网站</a>上给出的说明。</p>
</blockquote>
<h4 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h4><ol>
<li><p>安装Python 3.6。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# yum install gcc</span><br><span class="line">[root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</span><br><span class="line">[root ~]# gunzip Python-3.6.5.tgz</span><br><span class="line">[root ~]# tar -xvf Python-3.6.5.tar</span><br><span class="line">[root ~]# cd Python-3.6.5</span><br><span class="line">[root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations</span><br><span class="line">[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">[root ~]# make &amp;&amp; make install</span><br><span class="line">...</span><br><span class="line">[root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3</span><br><span class="line">[root ~]# python3 --version</span><br><span class="line">Python 3.6.5</span><br><span class="line">[root ~]# python3 -m pip install -U pip</span><br><span class="line">[root ~]# pip3 --version</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者/etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p>
</blockquote>
</li>
<li><p>安装Redis-3.2.12。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz</span><br><span class="line">[root ~]# gunzip redis-3.2.12.tar.gz</span><br><span class="line">[root ~]# tar -xvf redis-3.2.12.tar</span><br><span class="line">[root ~]# cd redis-3.2.12</span><br><span class="line">[root ~]# make &amp;&amp; make install</span><br><span class="line">[root ~]# redis-server --version</span><br><span class="line">Redis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6</span><br><span class="line">[root ~]# redis-cli --version</span><br><span class="line">redis-cli 3.2.12</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p>
<ol>
<li><p>启动防火墙服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# systemctl start firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>终止防火墙服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# systemctl stop firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启防火墙服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# systemctl restart firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看防火墙服务状态。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# systemctl status firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置/禁用防火墙服务开机自启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# systemctl enable firewalld</span><br><span class="line">Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.</span><br><span class="line">[root ~]# systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol>
<li><p>在指定的时间执行命令</p>
<ul>
<li><strong>at</strong> - 将任务排队，在指定的时间执行。</li>
<li><strong>atq</strong> - 查看待执行的任务队列。</li>
<li><strong>atrm</strong> - 从队列中删除待执行的任务。</li>
</ul>
<p>指定3天以后下午5点要执行的任务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# at 5pm+3days</span><br><span class="line"><span class="meta">at&gt;</span><span class="bash"> rm -f /root/*.html</span></span><br><span class="line"><span class="meta">at&gt;</span><span class="bash"> &lt;EOT&gt;</span></span><br><span class="line">job 9 at Wed Jun  5 17:00:00 2019</span><br></pre></td></tr></table></figure>

<p>查看待执行的任务队列。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# atq</span><br><span class="line">9       Wed Jun  5 17:00:00 2019 a root</span><br></pre></td></tr></table></figure>

<p>从队列中删除指定的任务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]$ atrm 9</span><br></pre></td></tr></table></figure>
</li>
<li><p>计划任务表 - <strong>crontab</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# crontab -e</span><br><span class="line">* * * * * echo "hello, world!" &gt;&gt; /root/hello.txt</span><br><span class="line">59 23 * * * rm -f /root/*.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p>
</blockquote>
<p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# cd /etc</span><br><span class="line">[root etc]# ls -l | grep cron</span><br><span class="line">-rw-------.  1 root root      541 Aug  3  2017 anacrontab</span><br><span class="line">drwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.d</span><br><span class="line">drwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily</span><br><span class="line">-rw-------.  1 root root        0 Aug  3  2017 cron.deny</span><br><span class="line">drwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourly</span><br><span class="line">drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly</span><br><span class="line">-rw-r--r--   1 root root      493 Jun 23 15:09 crontab</span><br><span class="line">drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly</span><br><span class="line">[root etc]# vim crontab</span><br><span class="line">  1 SHELL=/bin/bash</span><br><span class="line">  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">  3 MAILTO=root</span><br><span class="line">  4</span><br><span class="line">  5 # For details see man 4 crontabs</span><br><span class="line">  6</span><br><span class="line">  7 # Example of job definition:</span><br><span class="line">  8 # .---------------- minute (0 - 59)</span><br><span class="line">  9 # |  .------------- hour (0 - 23)</span><br><span class="line"> 10 # |  |  .---------- day of month (1 - 31)</span><br><span class="line"> 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"> 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"> 13 # |  |  |  |  |</span><br><span class="line"> 14 # *  *  *  *  * user-name  command to be executed</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="网络访问和管理"><a href="#网络访问和管理" class="headerlink" title="网络访问和管理"></a>网络访问和管理</h3><ol>
<li><p>安全远程连接 - <strong>ssh</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]$ ssh root@120.77.222.217</span><br><span class="line">The authenticity of host '120.77.222.217 (120.77.222.217)' can't be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.</span><br><span class="line">ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added '120.77.222.217' (ECDSA) to the list of known hosts.</span><br><span class="line">root@120.77.222.217's password:</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过网络获取资源 - <strong>wget</strong>。</p>
<ul>
<li>-b 后台下载模式</li>
<li>-O 下载到指定的目录</li>
<li>-r 递归下载</li>
</ul>
</li>
<li><p>发送和接收邮件 - <strong>mail</strong>。</p>
</li>
<li><p>网络配置工具（旧） - <strong>ifconfig</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ifconfig eth0</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255</span><br><span class="line">        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1067841  bytes 1296732947 (1.2 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 409912  bytes 43569163 (41.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络配置工具（新） - <strong>ip</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ip address</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络可达性检查 - <strong>ping</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ping www.baidu.com -c 3</span><br><span class="line">PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.</span><br><span class="line">64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms</span><br><span class="line">64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms</span><br><span class="line">64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms</span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示或管理路由表 - <strong>route</strong>。</p>
</li>
<li><p>查看网络服务和端口 - <strong>netstat</strong> / <strong>ss</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# netstat -nap | grep nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络监听抓包 - <strong>tcpdump</strong>。</p>
</li>
<li><p>安全文件拷贝 - <strong>scp</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件同步工具 - <strong>rsync</strong>。</p>
<blockquote>
<p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p>
</blockquote>
</li>
<li><p>安全文件传输 - <strong>sftp</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sftp root@1.2.3.4</span><br><span class="line">root@1.2.3.4's password:</span><br><span class="line">Connected to 1.2.3.4.</span><br><span class="line"><span class="meta">sftp&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>help</code>：显示帮助信息。</p>
</li>
<li><p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p>
</li>
<li><p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p>
</li>
<li><p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p>
</li>
<li><p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p>
</li>
<li><p><code>get</code>：下载文件。</p>
</li>
<li><p><code>put</code>：上传文件。</p>
</li>
<li><p><code>rm</code>：删除远端文件。</p>
</li>
<li><p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p>
</li>
</ul>
</li>
</ol>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol>
<li><p>查看进程 - <strong>ps</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21</span><br><span class="line">root         2     0  0 Jun23 ?        00:00:00 [kthreadd]</span><br><span class="line">...</span><br><span class="line">[root ~]# ps -ef | grep mysqld</span><br><span class="line">root      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqld</span><br><span class="line">mysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示进程状态树 - <strong>pstree</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# pstree</span><br><span class="line">systemd─┬─AliYunDun───18*[&#123;AliYunDun&#125;]</span><br><span class="line">        ├─AliYunDunUpdate───3*[&#123;AliYunDunUpdate&#125;]</span><br><span class="line">        ├─2*[agetty]</span><br><span class="line">        ├─aliyun-service───2*[&#123;aliyun-service&#125;]</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─dbus-daemon</span><br><span class="line">        ├─dhclient</span><br><span class="line">        ├─irqbalance</span><br><span class="line">        ├─lvmetad</span><br><span class="line">        ├─mysqld───28*[&#123;mysqld&#125;]</span><br><span class="line">        ├─nginx───2*[nginx]</span><br><span class="line">        ├─ntpd</span><br><span class="line">        ├─polkitd───6*[&#123;polkitd&#125;]</span><br><span class="line">        ├─rsyslogd───2*[&#123;rsyslogd&#125;]</span><br><span class="line">        ├─sshd───sshd───bash───pstree</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned───4*[&#123;tuned&#125;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]$ pgrep mysqld</span><br><span class="line">3584</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过进程号终止进程 - <strong>kill</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]$ kill -l</span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br><span class="line">[root ~]# kill 1234</span><br><span class="line">[root ~]# kill -9 1234</span><br></pre></td></tr></table></figure>

<p>例子：用一条命令强制终止正在运行的Redis进程。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis | grep -v grep | awk '&#123;print $2&#125;' | xargs kill</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过进程名终止进程 - <strong>killall</strong> / <strong>pkill</strong>。</p>
<p> 结束名为mysqld的进程。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# pkill mysqld</span><br></pre></td></tr></table></figure>

<p> 结束hellokitty用户的所有进程。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# pkill -u hellokitty</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p>
</blockquote>
</li>
<li><p>将进程置于后台运行。</p>
<ul>
<li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li>
<li><code>&amp;</code> - 将进程置于后台运行。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# mongod &amp;</span><br><span class="line">[root ~]# redis-server</span><br><span class="line">...</span><br><span class="line">^Z</span><br><span class="line">[4]+  Stopped                 redis-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询后台进程 - <strong>jobs</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# jobs</span><br><span class="line">[2]   Running                 mongod &amp;</span><br><span class="line">[3]-  Stopped                 cat</span><br><span class="line">[4]+  Stopped                 redis-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>让进程在后台继续运行 - <strong>bg</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# bg %4</span><br><span class="line">[4]+ redis-server &amp;</span><br><span class="line">[root ~]# jobs</span><br><span class="line">[2]   Running                 mongod &amp;</span><br><span class="line">[3]+  Stopped                 cat</span><br><span class="line">[4]-  Running                 redis-server &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将后台进程置于前台 - <strong>fg</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# fg %4</span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p>
</blockquote>
</li>
<li><p>调整程序/进程运行时优先级 - <strong>nice</strong> / <strong>renice</strong>。</p>
</li>
<li><p>用户登出后进程继续工作 - <strong>nohup</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# nohup ping www.baidu.com &gt; result.txt &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟踪进程系统调用情况 - <strong>strace</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# pgrep mysqld</span><br><span class="line">8803</span><br><span class="line">[root ~]# strace -c -p 8803</span><br><span class="line">strace: Process 8803 attached</span><br><span class="line">^Cstrace: Process 8803 detached</span><br><span class="line"><span class="meta">%</span><span class="bash"> time     seconds  usecs/call     calls    errors syscall</span></span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line"> 99.18    0.005719        5719         1           restart_syscall</span><br><span class="line">  0.49    0.000028          28         1           mprotect</span><br><span class="line">  0.24    0.000014          14         1           clone</span><br><span class="line">  0.05    0.000003           3         1           mmap</span><br><span class="line">  0.03    0.000002           2         1           accept</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.005766                     5           total</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p>
</blockquote>
</li>
<li><p>查看当前运行级别 - <strong>runlevel</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# runlevel</span><br><span class="line">N 3</span><br></pre></td></tr></table></figure>
</li>
<li><p>实时监控进程占用资源状况 - <strong>top</strong>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# top</span><br><span class="line">top - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-c</code> - 显示进程的整个路径。</li>
<li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li>
<li><code>-i</code> - 不显示闲置进程或僵尸进程。</li>
<li><code>-p</code> - 显示指定进程的信息。</li>
</ul>
</li>
</ol>
<h3 id="系统诊断"><a href="#系统诊断" class="headerlink" title="系统诊断"></a>系统诊断</h3><ol>
<li><p>系统启动异常诊断 - <strong>dmesg</strong>。</p>
</li>
<li><p>查看系统活动信息 - <strong>sar</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# sar -u -r 5 10</span><br><span class="line">Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06/02/2019      _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.80</span><br><span class="line"></span><br><span class="line">06:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li>
<li><code>-u</code> - 显示所有CPU的负载情况。</li>
<li><code>-d</code> - 显示所有磁盘的使用情况。</li>
<li><code>-r</code> - 显示内存的使用情况。</li>
<li><code>-n</code> - 显示网络运行状态。</li>
</ul>
</li>
<li><p>查看内存使用情况 - <strong>free</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1016168      323924      190452         356      501792      531800</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚拟内存统计 - <strong>vmstat</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# vmstat</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0</span><br></pre></td></tr></table></figure>
</li>
<li><p>CPU信息统计 - <strong>mpstat</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# mpstat</span><br><span class="line">Linux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05/30/2019      _x86_64_        (1 CPU)</span><br><span class="line"></span><br><span class="line">01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line"> 4581 pts/0    00:00:00 bash</span><br><span class="line"> 5664 pts/0    00:00:00 ps</span><br><span class="line">[root ~]# pmap 4581</span><br><span class="line">4581:   -bash</span><br><span class="line">0000000000400000    884K r-x-- bash</span><br><span class="line">00000000006dc000      4K r---- bash</span><br><span class="line">00000000006dd000     36K rw--- bash</span><br><span class="line">00000000006e6000     24K rw---   [ anon ]</span><br><span class="line">0000000001de0000    400K rw---   [ anon ]</span><br><span class="line">00007f82fe805000     48K r-x-- libnss_files-2.17.so</span><br><span class="line">00007f82fe811000   2044K ----- libnss_files-2.17.so</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# iostat</span><br><span class="line">Linux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)</span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.79    0.00    0.20    0.04    0.00   98.97</span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda               0.85         6.78        21.32    2106565    6623024</span><br><span class="line">vdb               0.00         0.01         0.00       2088          0</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示所有PCI设备 - <strong>lspci</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# lspci</span><br><span class="line">00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)</span><br><span class="line">00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]</span><br><span class="line">00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]</span><br><span class="line">00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01)</span><br><span class="line">00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)</span><br><span class="line">00:02.0 VGA compatible controller: Cirrus Logic GD 5446</span><br><span class="line">00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device</span><br><span class="line">00:04.0 Communication controller: Red Hat, Inc. Virtio console</span><br><span class="line">00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device</span><br><span class="line">00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device</span><br><span class="line">00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root ~]# ipcs</span><br><span class="line"></span><br><span class="line">------ Message Queues --------</span><br><span class="line">key        msqid      owner      perms      used-bytes   messages</span><br><span class="line"></span><br><span class="line">------ Shared Memory Segments --------</span><br><span class="line">key        shmid      owner      perms      bytes      nattch     status</span><br><span class="line"></span><br><span class="line">------ Semaphore Arrays --------</span><br><span class="line">key        semid      owner      perms      nsems</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p>
<p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p>
<p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">printf 'm = '</span><br><span class="line">read m</span><br><span class="line">printf 'n = '</span><br><span class="line">read n</span><br><span class="line">a=$m</span><br><span class="line">sum=0</span><br><span class="line">while [ $a -le $n ]</span><br><span class="line">do</span><br><span class="line">    sum=$[ sum + a ]</span><br><span class="line">    a=$[ a + 1 ]</span><br><span class="line">done</span><br><span class="line">echo '结果: '$sum</span><br></pre></td></tr></table></figure>

<p>例子2：自动创建文件夹和指定数量的文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">printf '输入文件名: '</span><br><span class="line">read file</span><br><span class="line">printf '输入文件数量(&lt;1000): '</span><br><span class="line">read num</span><br><span class="line">if [ $num -ge 1000 ]</span><br><span class="line">then</span><br><span class="line">    echo '文件数量不能超过1000'</span><br><span class="line">else</span><br><span class="line">    if [ -e $dir -a -d $dir ]</span><br><span class="line">    then</span><br><span class="line">        rm -rf $dir</span><br><span class="line">    else</span><br><span class="line">        if [ -e $dir -a -f $dir ]</span><br><span class="line">        then</span><br><span class="line">            rm -f $dir</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    mkdir -p $dir</span><br><span class="line">    index=1</span><br><span class="line">    while [ $index -le $num ]</span><br><span class="line">    do</span><br><span class="line">        if [ $index -lt 10 ]</span><br><span class="line">        then</span><br><span class="line">            pre='00'</span><br><span class="line">        elif [ $index -lt 100 ]</span><br><span class="line">        then</span><br><span class="line">            pre='0'</span><br><span class="line">        else</span><br><span class="line">            pre=''</span><br><span class="line">        fi</span><br><span class="line">        touch $dir'/'$file'_'$pre$index</span><br><span class="line">        index=$[ index + 1 ]</span><br><span class="line">    done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>例子3：自动安装指定版本的Redis。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">install_redis() &#123;</span><br><span class="line">    if ! which redis-server &gt; /dev/null</span><br><span class="line">    then</span><br><span class="line">        cd /root</span><br><span class="line">        wget $1$2'.tar.gz' &gt;&gt; install.log</span><br><span class="line">        gunzip /root/$2'.tar.gz'</span><br><span class="line">        tar -xf /root/$2'.tar'</span><br><span class="line">        cd /root/$2</span><br><span class="line">        make &gt;&gt; install.log</span><br><span class="line">        make install &gt;&gt; install.log</span><br><span class="line">        echo '安装完成'</span><br><span class="line">    else</span><br><span class="line">        echo '已经安装过Redis'</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_redis 'http://download.redis.io/releases/' $1</span><br></pre></td></tr></table></figure>

<h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ol>
<li><p>Linux命令行常用快捷键</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>tab</td>
<td>自动补全命令或路径</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>将光标移动到命令行行首</td>
</tr>
<tr>
<td>Ctrl+e</td>
<td>将光标移动到命令行行尾</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>将光标向右移动一个字符</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>将光标向左移动一个字符</td>
</tr>
<tr>
<td>Ctrl+k</td>
<td>剪切从光标到行尾的字符</td>
</tr>
<tr>
<td>Ctrl+u</td>
<td>剪切从光标到行首的字符</td>
</tr>
<tr>
<td>Ctrl+w</td>
<td>剪切光标前面的一个单词</td>
</tr>
<tr>
<td>Ctrl+y</td>
<td>复制剪切命名剪切的内容</td>
</tr>
<tr>
<td>Ctrl+c</td>
<td>中断正在执行的任务</td>
</tr>
<tr>
<td>Ctrl+h</td>
<td>删除光标前面的一个字符</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td>退出当前命令行</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>搜索历史命令</td>
</tr>
<tr>
<td>Ctrl+g</td>
<td>退出历史命令搜索</td>
</tr>
<tr>
<td>Ctrl+l</td>
<td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td>
</tr>
<tr>
<td>Ctrl+s</td>
<td>锁定终端使之暂时无法输入内容</td>
</tr>
<tr>
<td>Ctrl+q</td>
<td>退出终端锁定</td>
</tr>
<tr>
<td>Ctrl+z</td>
<td>将正在终端执行的任务停下来放到后台</td>
</tr>
<tr>
<td>!!</td>
<td>执行上一条命令</td>
</tr>
<tr>
<td>!数字</td>
<td>执行数字对应的历史命令</td>
</tr>
<tr>
<td>!字母</td>
<td>执行最近的以字母打头的命令</td>
</tr>
<tr>
<td>!$ / Esc+.</td>
<td>获得上一条命令最后一个参数</td>
</tr>
<tr>
<td>Esc+b</td>
<td>移动到当前单词的开头</td>
</tr>
<tr>
<td>Esc+f</td>
<td>移动到当前单词的结尾</td>
</tr>
</tbody></table>
</li>
<li><p>man查阅命令手册的内容说明</p>
<table>
<thead>
<tr>
<th>手册中的标题</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>NAME</td>
<td>命令的说明和介绍</td>
</tr>
<tr>
<td>SYNOPSIS</td>
<td>使用该命令的基本语法</td>
</tr>
<tr>
<td>DESCRIPTION</td>
<td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>命令相关参数选项的说明</td>
</tr>
<tr>
<td>EXAMPLES</td>
<td>使用该命令的参考例子</td>
</tr>
<tr>
<td>EXIT STATUS</td>
<td>命令结束的退出状态码，通常0表示成功执行</td>
</tr>
<tr>
<td>SEE ALSO</td>
<td>和命令相关的其他命令或信息</td>
</tr>
<tr>
<td>BUGS</td>
<td>和命令相关的缺陷的描述</td>
</tr>
<tr>
<td>AUTHOR</td>
<td>该命令的作者介绍</td>
</tr>
</tbody></table>
</li>
</ol>
<p>内容转至 <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day31-35/31-35.玩转Linux操作系统.md" target="_blank" rel="noopener">原文链接</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
